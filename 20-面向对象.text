面向对象
通俗的说，面向对象就是指所有的操作都是以对象为基准的，对象上有相应的属性和方法。
面向对象的三大特点:封装，继承，多态。
封装 : 封装就是把过程和数据包围起来，通常包括两部分 1.相关的数据 2.基于数据所能做的事情。
继承 : 派生类继承基类的属性方法(就像子类继承父类)，可以实现代码的重用。
多态 : 不同的对象通过相同的方法调用实现各自行为的能力。

创建对象的常见方式
1.使用已有的构造函数创建对象
例: var obj = new Object(); 这就创建了一个空对象。
其内容可以根据 obj.xxx = xxx;来添加。
2.直接使用赋值的方式创建对象
例: var obj = {};
其赋值方式相同 obj.xxx = xxx;
也可以直接创建有内容的对象
var obj = {
  xxx : xxx,
  xxx : xxx
}
其内容是以键值对的形式出现，内容之间以 , 逗号隔开，可以添加方法。
3.自定义构造函数创建对象 顾名思义就是创造函数的形式来创建对象。
其函数名称首字符大写就是为了区分构造函数与普通函数。
function Person(xxx,yyy){
  console.log(this) //其中构造函数中的this 就是指构造函数本身
  this.xxx = xxx;
  this.yyy = yyy;
}
构造函数的调用必须要 new 实例化之后才可以调用。
var one = new Person(xxx, yyy);根据想要传入的条件传入参数即可。

对于构造函数，如果不是实例化而是直接调用，那么所有的属性和方法都是window的属性。
函数中的 this == window。

构造函数的缺点: 对于属性可以自行设置，但是若其方法相同但是每一次都会重新调用，这样会占据内存位置。
解决该问题可以将共同的方法设置在对象原型(prototype)上。

对象原型即 函数名称 functionName.prototype.method = function(){ ... };
其 functionName.prototype 也是一个对象。
这样在对象原型上创建的方法 就不需要在构造函数中创建了，而且每一个调用该构造函数的节点都会具有该
方法。

将共有的部分设置在prototype上，不同的部分直接写在构造函数内部就可以。

原型链继承
其原型和构造函数内对象都可以直接定义到要继承的构造函数的原型prototype上去。

其继承后的构造函数的 constructor(构造器)也会继承父元素的，这是后就需要设置自身的构造器
xxx.prototype.constructor = xxx。继承的构造函数会有其继承下来的属性和方法。

在面向对象继承过程中，若要继承基类的方法，那么自己的方法和构造器(constructor)
必须写在原型链继承的后面，不然无效。

对于普通变量，继承后自己修改普通变量，相当于设置对象上的属性，并没有修改原型。
而对于修改的是引用的变量，那么相当于修改的是原型，因此会导致所有的实例对象都受到影响。
