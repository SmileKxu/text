javascript 数组

一个Array对象就是一个有序数据集合，数组就是在一个变量中存储多个值，每个值就是一个元素数组中
每一项都有一个数字附于其上，被称为索引。在javascript中，数组索引从0开始，并且可以使用多种方
法操作。

在javascript中 数组和对象的数据类型都是object(对象);如果要区分二者，直接打印其结果，
数组显示的内容在[]内,而对象依旧是object{}。

创建数组可以使用变量定义进行创建，[] 方括号内使用 , 逗号隔开。
也可以使用 Array() 创建; var xxx = new Array();如果括号内只输入一个数值，那么就意味
着创建了一个长度为多少的数组。

数组的长度直接打印 n.length 就可以得到。

数组元素的添加和删除
数组的添加可以使用 push()方法 和 unshift()方法
其中 push() 方法添加是从后面依次添加一个或者多个元素。
而 unshift() 是从前面开始添加一个或者多个元素，如果单个添加的话，会逐一前排，添加多个元素就是
直接添加到最前面。

数组的删除可以使用 pop()方法 和 shift()方法
其中 pop() 方法删除是删除当前数组的最后一个元素。
而 shift() 方法删除是删除当前数组的第一个元素，会改变元素的索引位置。
pop()方法 和 shift()方法都只能删除数组的一个元素。

数组的遍历
使用for循环是最常见的便利数组的方法。对于这种遍历方法，其数组的长度最好使用一个变量定义，
然后在进行遍历，不然的话每次循环都需要遍历一次数组。

对于 while 循环的书写模式不要个 for 循环弄混，要在while循环外先定义变量，在while() 内只
输入其变量的条件，在{} 内的最后不要忘记写 i++;
例: var i = 0;
 while (i < xxx){
   console.log("...");
   i++;
 }

数组的常用方法
join() 连接数组元素
join() 方法将数组的所有元素链接到一个字符串中。其括号内不输任何东西，那么就是将数组内容(包括,)
以字符串的形式打印出来。如果()内输入 "" 空字符串，那么所有元素之间都没有任何字符直接连接成一整
串，可以传递 + - 等符号。
对于 eval() 方法，在严格模式下是不能使用的，可以将字符串进行运算并输出数值。其字符串必须符合运
算规则，不然就会报错。

reverse() 颠倒数组元素顺序
reverse() 方法颠倒数组中元素的位置，会影响数组本身，数组中的第一个元素变成最后一个，最后一个会
成为第一个。

sort() 对数组进行排序
sort() 方法存在有参数和没有参数两种情况，对于没有参数的情况下，匀速的排序会转换成字符串的形式，
然后在进行比较排序，排列顺序由小到大向右排列。这就会出现排列后 10 会排列在 2 前面等情况。
对于有参数的情况，那么数组会按照调用该函数的返回值排序。 即 a 和 b 两个将要被比较的元素
如果参数 (a , b) 小于 0 ; 那么 a 就会排列在 b 的前面;
如果参数 (a , b) 大于 0 ; 那么 b 就会排列在 a 的前面;
如果参数 (a , b) 等于 0 ; 那么 a 与 b 的位置不会发生变化;
其书写格式如下:
例: n.sort(a, b){
  return a - b;
}

concat() 数组连接
concat() 方法用于合并两个数组或者多个数组。此方法不会更改现有的数组，而是返回一个新的数组。
书写模式如下:
var a = b.concat(c);
意味着新定义的 a 赋值为 在 b 数组的后面拼接 c 数组，也就是 b 与 c 两个数组的拼接。

slice() 对数组内容进行浅复制
slice() 方法返回一个从开始到结束(但是不包括结束)选择的数组的一部分浅复制到一个新的数组对象，其
原数组不会被修改。
如果()内不输入任何东西，那么就会复制一个一模一样的原数组。
如果只传递一个参数，那么就是从其开始位置一直到整个数组的最后都被复制 (包含最后一个)。
如果只传递一个参数，并且该数值为负数，那么就是从倒数的该位置一直到数组的最后 (包含最后一个)。
如果传递两个参数，那么就是从开始位置到结束位置 (不包含最后一个)。
如果slice切片元素是个对象或者数组，那么slice会拷贝这个对象引用到新的数组里，这时的原数组和新
生成的数组会同时引用该部分(对于基本数据类型不会发生)，新数组修改其内容的话，原数组的该部分也会
跟随发生改变。

splice() 数组元素的替换修改
splice() 通过删除现有的元素和/或添加新元素来更改数组内容。直接修改原数组。
array.splice(start);
array.splice(start, deleteCount);
array.splice(start, deleteCount,item1,item2,....);
start 指定修改的开始位置(从0开始计数)。如果超出了数组的长度，则从数组末尾开始添加内容。如果是
负值，则表示从数组末尾开始的第几位(从1开始计数)。
deleteCount 整数，表示要移除的数组元素个数。如果deleteCount为0，则不移除元素。
如果deleteCount 大于 start之后的所有元素，则从start开始后面的所有元素都将被删除。
deleteCount 后面的参数，则是要添加的元素，可以添加一个或者多个。如果deleteCount为0，就可以
实现在任意位置添加的效果。

ECMA5中数组新方法
forEach() 方法对数组的每个元素执行一次提供的函数。
forEach(function(elem,index,arr){});共有三个参数
elem:数组中正在处理的当前元素
index:数组中正在处理的当前元素的索引值
arr:forEach()方法正在操作的数组
在不需要最后两个参数的时候，后两个参数可以不用写。
forEach() 方法可以对数组元素进行某些计算。

map() 方法创建一个新数组，其结果是该数组中的每个元素调用提供的函数。
会返回一个新的数组，需要 return。

filter() 方法使用指定的函数测试所有的元素，并创建一个包含所有通过测试元素的新数组。
return 返回 true 则表示保留该元素， false 则不保留。

every() 方法测试数组的所有元素是否都通过了指定的函数的测试。其返回值就是 true 和 false，
如果发现一个callback返回false的值，那么every会立即返回false。

indexOf() 会检索数组元素的第一个索引位置，如果该元素不存在则返回-1.indexOf 检索的是数组内元
素，并不是索引位置。
