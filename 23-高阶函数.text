函数高级用法级元素位置操作

函数绑定 bind()。
*bind()方法创建一个新的函数，当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何
提供之前提供一个给定的参数序列。

函数记忆(函数缓存)
函数记忆就是在构建函数的时候，对于某些计算结果可以进行记忆，当再次计算出现时不需要进行计算，直接
调用结果，从而做到避免复杂计算的过程，提高代码的性能。

函数记忆需要自己定义方法来存储数据，一般都是 fnName.xxx (xxx为自定义的属性)
判断这个属性 fnName.xxx === undefined 如果没有那么就创建一个对象来存储数据
当 fnName.xxx[canshu] !== undefined 的时候 return 返回 fnName.result[canshu]。
代码如下:
  if(fnName.xxx === undefined){
    fnName.xxx = {};
  }
  if(fnName.xxx[canshu] !== undefined){
    return fnName.xxx[canshu];
  }

对于函数而言，其参数可以是基本数据类型，也可以是引用数据类型。当其参数为引用数据类型时(数组，
对象以及函数)，函数内部的方法会改变其原引用类型的的内容。而基本数据类型不会因为函数内的方法
而改变其自身的属性和方法。

函数柯里化
函数柯里化: 函数柯里化使用的也是bind()方法，但是不更改其执行环境，只是为其绑定固定的参数。

高阶函数
将一个或者多个函数作为参数，返回一个具有功能组合的函数。
高阶函数就是在已经拥有的函数基础上，将其作为参数，然后返回一个经过计算后的新函数。
其返回值 return 也是一个函数。  其返回值函数里面的返回值要使用apply()方法传递参数进去。
 xxx.apply(this, arguments); 也就是传递 arguments。

函数节流
函数节流的目的就是为了不让一个代码连续重复执行。

定时器节流
对于数据量庞大的情况而言，使用循环遍历会导致页面进入到只执行当前遍历任务，这就会导致此时无法做
任何其他操作，这种情况就需要使用定时器节流。
定时器节流的三大问题
1.什么是节流？
答: 某些代码不可以在没有间断的情况下连续重复执行。
2.为什么要节流？
答: 使用节流就是为了让代码在运行的过程中，不会一直连续重复执行，可以执行其他代码。
3.如何实现节流？
答: 使用定时器(setTimeout)来达到节流效果。

单例模式
单例模式就是将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一的变量进行访问。
通过保证单例模式只有一个，确保使用的都是同样的全局资源。
js单例模式一共有三种:
1.最简单的单例模式就是赋值模式的对象。
2.创建一个包含了私有变量和私有函数的单例对象，只能通过提供的接口访问。
  其方法是使用立即函数来保证只创建一个对象。
3.惰性创建单例对象。

创建私有变量方法: 首先要创建一个立即函数，在这个函数中定义变量和方法，然后其返回值 return
是一个对象{}，其对象中也有对应的方法来获得函数中的值。

惰性创建单例对象， 首先定义一个变量 设置为 null；
然后定义一个构造函数，在这个构造函数中写创建私有变量的的代码，方法一样，最后return 判断是否
需要单例对象。
