正则表达式
正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则。在很多文本编辑器里，正则表达式
通常被用来检索、替换那些符合某个模式的文本。

javascript中正则表达式的定义方式。
1.直接定义 var xxx = /[0-3]/;
2.使用RegExp(构造函数)定义。 var xxx = new RegExp(/hello/,'g');

正则表达式中存在的一些预定义:
. [^\n\r]    除了换行和回车之外的任意字符
\d [0-9]     数字字符
\D [^0-9]    非数字字符
\s           空白字符
\S           非空白字符
\w [a-zA-z_0-9]    单词字符
\W [^a-zA-Z_0-9]   非单词字符

元字符: *  +  ?  |
*     表示 * 前边的字符重复零次或更多 (>=0);
+     表示 + 前边的字符重复一次或更多 (>=1);
?     表示 ? 前边的字符重复零次或一次 (0 || 1) 要么有，要么没有。
a|b   表示 一个 a 或者 b
当碰到 /a+?/ 则表示进行最短匹配 /a+/是贪婪匹配。

转义字符: (escape)表示为反斜线(\)+字符的形式，共有一下三种情况。
1.因为元字符有特殊的含义，所以无法直接匹配。如果要匹配他们本身，则需要在它们前面加上反斜杠(\)。
2.'\'加非元字符，表示一些不能打印的特殊字符
3.'\'加任意其他字符，默认情况就是匹配此字符，也就是说，反斜线(\)被忽略了

g : 表示全局(global)模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止
i : 表示不区分大小写(case-insensitive)模式，即在确定匹配项时忽略模式与字符串的大小写
m : 表示多行(multiline)模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项


对于 ^ 写在[]内 表示取非  [^xxx]匹配xxx之外的字符。
而当 ^ 和 $ 写在[]外 ^ 则会匹配行或者字符串的起始位置 而 $ 则会匹配行或者字符串的结尾位置

正则表达式常用测试方法:
1.test()方法:
test() 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 flase。
xxx.test(yyy);  其中 xxx 为正则表达式的式子， yyy为要查看匹配的字符串。

2.match()方法:
xxx.match(yyy)  其中 xxx 为匹配的字符串， yyy为正则表达式的式子。
match() 方法对正则表达式匹配字符串时，该方法用于获取匹配结果。
其返回值是一个数组，它包括整个的匹配结果，和通过捕获组匹配到的结果，如果没有匹配到则返回null。
match()方法如果添加 g 那么就不会获得()捕获的匹配，其返回的就是 当前要匹配的结果。

2.replace()方法:
replace() 方法可以替换指定字符串中的字符，其替换方法在字符串中替换某个部分或者全部部分，
并将替换结果作为新字符串返回。替换可以是一个字符串或一个函数来调用匹配。
xxx.replace(/..../g, function(match, p1){ // 两个参数
    return p1..... (匹配字符的修改)
});
