javascript基础进阶
常见的浏览器兼容问题，主要是对于IE老版本出现的一些问题，比如以下:
1. 不同浏览器默认的margin，与padding值不同。
2. 对于设置float排列在一行的块元素，如果有左右margin值，那么在IE6显示的margin要大于
   自己设置的值。
   解决办法： 在其css样式中加入一条 display:inline;
3. 对于设置自身高度小于10px的时候，在IE6，IE7中显示的高度要高于自身设置的高度。
   解决办法： 将line-hight的值设置的比自身高度要小，或者设置一个overflow:hidden;
4. 图片默认有一定的间距
   解决办法： 使用float 将图片排列在一行就可以了。或者对 body 设置一个font-size:0;(不推荐)
   但是这样的话，默认的字体都为0，如果有字体出现要对字体单独设置大小。
5  透明度兼容css的设置问题
   对于低版本IE浏览器，其透明度设置如下代码:
   filter:alpha(opacity=50);//当前效果为实现50%的不透明度。

css hack一共有三个:条件hack、属性级hack、和选择符级hack。
1.条件hack: <!--[if Ie]>  <![endif]-->
2.属性级hack:
语 法: selector{<hack>?property:value<hack>?}
其 _:选择IE6及以下。 *:选择IE7及以下。\9:选择IE6+ 。\0:选择IE8+和Opera15以下的浏览器。


Doctype的作用： <!DOCTYPE>声明位于html文档中的第一行，在html标签之前，告诉浏览器的解析器
用什么文档标准来准备解析这个文档。
标准模式下，其排版和js运作模式都是以浏览器支持的最高标准运行的。
兼容模式下，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为防止站点无法工作。

当一个html中引入了两个不同版本的jquery时，那么后引入的jquery文档会覆盖前一个jquery
文档，这时候查看当前jquery文档应用如下代码 console.log(jQuery.fn.jquery);
为了防止这种情况，可以定义一个新的变量 例:var $$， 然后让其 = jQuery.noConflict();
这时的$$就等于我们应用的当前版本的jquery。或者引入两边script标签，在不同版本的jquery
中写当前的代码，分开来写。

数值转换有三种，分别是Number、 parseInt、 parseFloat。三种方法各有不同如下：
1.Number 数值转换比较暴力，可以转换16进制的数值，对于小数可以直接转换为小数，false和""空字符
串都可以转换为0。
2.parseInt 数值转换不会转换小数，只会转换小数点之前的数值，对于 "" 空字符串和 false(true)与
Number不一样，只会转换成NaN，对于123abc这种连接的字符串，也会转换保留其数字转换为123，但是
如果字母放在前面，那么就只能转换成NaN了。
3.parseFloat 数值转换可以转换小数，但是对于出现多个小数点情况的数值，那么只会转换第一个小数点
后面的数值，到第二个小数点停止，对于 "" 空字符串和 false(true)与Number不一样，只会转换成NaN，
对于123abc这种连接的字符串，也会转换保留其数字转换为123，但是如果字母放在前面，那么就只能转换
成NaN了。

break语句
break语句会立即退出循环，但是对于其跳出的是哪个循环看其是否有指定，没有的话就是跳出当前循环。

Function中的arguments
arguments 只能写在函数的内部，可以获得函数实参的数据，获得的数据就像一个数组一样，也可以查看
单独的某一个数据 arguments[n]。其开始的第一个元素是arguments[0],第二个是arguments[1],依
次类推。

对于函数的形式参数(形参)，可以查看其个数，但是不能单独查看具体的某一个数值，直接打印
console.log(name.length) 其中的name就是函数的名称。

字符串拼接，将 "" 空字符串放在第一位置，那么就是单纯的拼接。
如果字符串在中间或者最后位置，那么会先进行正常运算(+法运算)然后在进行拼接

布尔操作符 逻辑与、逻辑或、逻辑非
逻辑非 : 由一个 ! 表示 就是取反，正确的变成错误的，错误的变成正确的。

逻辑与 由两个 && 连接表示 两个操作数必须都是真的那么才会返回 true，只要有一个是假的，那么
就会就会返回false，并且返回当前flase的值。
如果两个都为true，那么返回的是第二个值。
逻辑与最终得到的是一个计算结果，不管是true还是false得到的都是那个相对的值。

逻辑或的特点，只要有一个是真的，那么最终返回的就是true，当第一个判断为真，那么就不会继续
向后运行，直接输出当前的值。

关系操作符
一个等于号 表示赋值
两个等于号 表示相等，在转换成数值行在进行比较
三个等号表示全等，不进行转换，直接进行比较
!= 表示不等
!== 表示不全等
*任何数值与 NaN比较都是false 包括NaN自己本身*
a += 1; // += 表示 a = a + 1;
//逗号操作符，最后一个表达式的结果为整个运算的结果，但是前边的表达式都会进行计算。最后的结果
就是最后 , 号后面的最后的那个值。
